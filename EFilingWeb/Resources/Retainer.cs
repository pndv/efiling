// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace EFilingWeb.Resources
{
    using Model;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class Retainer : RetainerBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n\r\n");
            
            #line 7 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"

    string GetCaseTitle() {
        return @"
{
\centering
\textsc{In the " + courtName + @"}\\
\textsc{" + jurisdiction + @"} \\
\textsc{ " + $"{caseType} {expandedCaseNumber}" + @"} \\
\par
}";
    }

    string GetParties() {
        return @"
{
\centering
\begin{tabular}{l c r}
" + petitioner + @" & \ldots & Appellant/Petitioner \vspace*{1ex} \\* 
\tabularnewline
\multicolumn{3}{c}{-- \textsc{Between/And} --} \vspace*{1ex} \\* 
\tabularnewline
" + respondentName + @" & \ldots & Defendant/Respondent/Opposite Party \tabularnewline
\end{tabular}
}";
    }

    string GetInMatterOf(string page) {
        return @"
\begin{table}[h]
    \centering
    \begin{tabular}{l c r}
        \multicolumn{3}{c}{\underline{\textsc{In the matter of:}}}  \tabularnewline
        \tabularnewline
        " + petitioner + @" & \ldots & Petitioner \\* 
        \tabularnewline
        \multicolumn{3}{c}{-- \textsc{versus} --} \\* 
        \tabularnewline
        " + respondentName + @" & \ldots & Respondent \tabularnewline
    \end{tabular}\label{tab:InMatterOf" + page + @"}
\end{table}
";
    }

            
            #line default
            #line hidden
            this.Write("% Preamble\r\n\\documentclass[14pt, titlepage]{article}\r\n\r\n% Packages\r\n\\usepackage{xparse}\r\n\\usepackage[driver=xetex,\r\n            a4paper,\r\n            noheadfoot,\r\n            includeheadfoot,\r\n            nomarginpar,\r\n            top=1.5in,\r\n            bottom=1.5in,\r\n            left=1.75in,\r\n            right=1.0in]{geometry}\r\n\\usepackage{xunicode}\r\n\r\n% Set font to Times New Roman\r\n\\usepackage{fontspec}\r\n\r\n\\setmainfont{Times New Roman}\r\n% line spacing = 1.5\r\n\\usepackage[onehalfspacing]{setspace}\r\n\r\n\\usepackage[parfill]{parskip}\r\n\r\n% Format section title to have numbers in Table of Contents, but not in document\r\n\\newcommand{\\secpagebreak}{}\r\n\\usepackage{titlesec}\r\n\\titleformat{\\section}{\\center \\normalfont \\bfseries}{}{0pt}{\\secpagebreak}\r\n\r\n% Format Table of Contents\r\n\\usepackage{etoc}\r\n\\newcommand{\\titleoftoc}{\\textsc{Index}}\r\n\\newcommand{\\mktoc}{\r\n    % Cover page\r\n    \\begin{center}\r\n        \\etocsetstyle{section} %levelName\r\n                     {} %start\r\n                     {\\etociffirst{ \\\\ \\hline}{\\\\ \\hline}} %prefix\r\n                     %should be \\etocnumber & \\etocname & \\etocnumber but I can't get the page numbering correct\r\n                     {{\\etocnumber}  {\\etocname}  {\\etocnumber} } %contents\r\n                     {} % end\r\n        \\etocsettocstyle{\\section*{\\titleoftoc}\r\n                         \\hypersetup{hidelinks}\r\n                         \\begin{tabular}{|c|l|c|}\r\n                            \\hline\r\n                            \\multicolumn{1}{|c|}{\\bfseries Si No} & {\\bfseries Particulars} & {\\bfseries Page} \\\\ \\hline\r\n                         \\end{tabular}\r\n                        } % before TOC\r\n                        {} % after TOC\r\n        \r\n        \\etocglobaldefs\r\n        \\etocsetnexttocdepth{1}\r\n        \\tableofcontents\r\n    \\end{center}\r\n}\r\n\r\n% Make entries in the index table as links\r\n\\usepackage[linktocpage=true]{hyperref}\r\n\r\n\\newcommand {\\mktitle}{\r\n    % Cover page\r\n    \\thispagestyle{empty}\r\n");
            
            #line 113 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetCaseTitle()));
            
            #line default
            #line hidden
            this.Write("\r\n\\vspace*{4em}\r\n");
            
            #line 115 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetInMatterOf("cover")));
            
            #line default
            #line hidden
            this.Write("\r\n\\vspace*{4em}\r\n\\mktoc\r\n\\vspace*{3em}\r\n\\textbf{Advocate for the Respondent: ");
            
            #line 119 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(advocateName));
            
            #line default
            #line hidden
            this.Write("}\r\n    % Break after each section\r\n    \\renewcommand{\\secpagebreak}{\\clearpage}\r\n    \r\n    %% Set page number and section numbering\r\n    \\setcounter{section}{0}\r\n    \\setcounter{page}{0}\r\n}\r\n\r\n%%%%% Main content\r\n\r\n\\begin{document}\r\n\r\n\\mktitle\r\n\r\n% Text of Vakalatnama\r\n\\section{Vakalatnama}\\label{sec:vakalatnama}\r\n\r\n(S.C.R.\\ Order IV, Rule 18) \\\\\r\n\\textsc{In the ");
            
            #line 138 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(courtName));
            
            #line default
            #line hidden
            this.Write("} \\\\\r\nAppellate/Original Jurisdiction\r\n\r\n\r\n\\begin{center}\r\nSuit/Appeal No of Petition/Reference Plaintiff ");
            
            #line 143 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(caseType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 143 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(shortenedCaseNumber));
            
            #line default
            #line hidden
            this.Write("\r\n\\vspace*{2ex}\r\n");
            
            #line 145 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetParties()));
            
            #line default
            #line hidden
            this.Write("\r\n\\end{center}\r\n\r\n\\vspace*{4em}\r\n\r\nI, ");
            
            #line 150 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getPersonDetails(data.Respondent, isMultiLine: false)));
            
            #line default
            #line hidden
            this.Write(" do hereby appoint and retain ");
            
            #line 150 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(advocateName));
            
            #line default
            #line hidden
            this.Write(", Advocate of the \r\n");
            
            #line 151 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(courtName));
            
            #line default
            #line hidden
            this.Write(" to act and appear for us in the above ");
            
            #line 151 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(caseType));
            
            #line default
            #line hidden
            this.Write(" and on our behalf to conduct \r\nand prosecute (or defend) the same and all proceedings that may be taken in respect of any application connected with the \r\nsame or any decree or order passed therein, and to file application for Review, to file and obtain return of documents, \r\nand to deposit and receive money in our behalf in the said ");
            
            #line 154 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(caseType));
            
            #line default
            #line hidden
            this.Write(" and in applications for Review, \r\nand to represent us and to take all necessary steps on our behalf in the above matter. We agree to ratify all acts done \r\nby the aforesaid Advocate in pursuance of this authority.\r\n\r\nDated this day of ");
            
            #line 158 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(filingDate));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n% Memo of appearance\r\n\\section{Memo of Appearance}\\label{sec:memo-of-appearance}\r\n");
            
            #line 162 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetCaseTitle()));
            
            #line default
            #line hidden
            this.Write(" \r\n\r\n\\vspace*{4em}\r\n");
            
            #line 165 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetInMatterOf("memo")));
            
            #line default
            #line hidden
            this.Write("\r\n\\vspace*{4em}\r\n\r\nTo, \\\\\r\nThe Registrar, \\\\\r\n");
            
            #line 170 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(courtName));
            
            #line default
            #line hidden
            this.Write(", \\\\\r\nNew Delhi.\r\n\\newline \\newline\r\nDear Sir/Madam,\r\n\\newline \\newline\r\nPlease enter my appearance on behalf of the respondent ");
            
            #line 175 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(respondentName));
            
            #line default
            #line hidden
            this.Write(" in the above-mentioned case.\r\n\\newline \\newline\r\nNew Delhi,\\newline \r\nYours faithfully,\\newline\r\n\\vspace{4ex}\r\n");
            
            #line 180 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(advocateName));
            
            #line default
            #line hidden
            this.Write("\r\n\r\nAdvocate for the respondent ");
            
            #line 182 "D:\Projects\EFilingWeb\EFilingWeb\Resources\Retainer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(advocateName));
            
            #line default
            #line hidden
            this.Write("\\\\\r\nContact Details are in the accompanying retainer agreement i.e., Vakalatnama\r\n\r\n\\end{document} \r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class RetainerBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
